/*########################   Zambretti Weather Forecaster #############################
 * Forecasts the weather using the Zambretti algorithm, displays weather symbol, weather description, air pressure and pressure trend
 * This source code is protected under the terms of the MIT License and is copyright (c) 2017 by David Bird and permission is hereby granted, free of charge, to
 * any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, but not to sub-license and/or 
 * to sell copies of the Software or to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *   The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 *   FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
 *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. 
 *   ANY REVENUE FROM THE SOFTWARE MUST BE APPORTIONED TO THE COPYRIGHT OWNER D.L.BIRD (C) 2017
 *   See more at http://dsbird.org.uk
 *   
 *   Display used was Waveshare 1.54" e-Ink, powered used was 5mWhr over 9-hours, or 0.55mW every hour and at 5v = 0.11mA
 *   WEMOS ESP32 Lite consumes 1.88mA in sleep mode powered directly by the 3v3 pin
 *   WEMOS ESP32 Lite consumes 5.65mA in sleep mode powered directly by the 5v USB
 *   A 2600mAhr battery would last for 2600mAhr/0.11mA = 2.67years!
 */   

#include <Wire.h>
#include "RTClib.h"
#include <Adafruit_Sensor.h>
#include <Adafruit_BMP280.h>
#include "DHT.h"
#include <SPI.h>
#include <SD.h>
#include <SdFat.h>
#include <UTFT_SdRaw.h>
#include <UTFT.h>
#include "sunrise.h"             //library for sunrise/sunset calculations


UTFT myGLCD(CTE70, 38, 39, 40, 41); //(byte model, int RS, int WR, int CS, int RST, int SER)

UTFT_SdRaw myFiles(&myGLCD);

File myFile;

RTC_DS3231 rtc;

// Declare which fonts we will be using
extern uint8_t SmallFont[];
extern uint8_t BigFont[];
extern uint8_t Grotesk16x32[];
extern uint8_t Grotesk32x64[];
extern uint8_t Grotesk24x48[];

//###########################################################################
String  time_str, wx_text, wx_image, trend_img;
int last_reading_hour;
int reading_hour;
int hr_cnt;
int16_t long_trend;
float   temperature;
float humidex;  
String Humidex_Message = "void";

// An array structure to record pressure, temperaturre, humidity and weather state
float reading[24]; // An array covering 24-hours to enable P, T, % and Wx state to be recorded for every hour

Adafruit_BMP280 bme;
#define pressure_offset 3.2 // Used to adjust sensor reading to correct pressure for your location

#define DHT1PIN 6
#define DHT2PIN 7
#define DHT1TYPE DHT22   // DHT 22  (AM2302)
#define DHT2TYPE DHT11
DHT dht1(DHT1PIN, DHT1TYPE);
DHT dht2(DHT2PIN, DHT2TYPE);

    float tF;
    float dP;
    float dPF;
    float pression;
    float Tmax_Ext = 0.0;
    float Tmin_Ext = 80.0;
    float Tmax_Int = 0.0;
    float Tmin_Int = 80.0;

//For Sunrise and Sunset
#define LAT 31.63  // latitude in degrees, south is negative (used in sun calculation)
#define LON -84.10  // longitude in degrees, west is negative (used in sun calculation)
String nfm = "Reading"; // days to next full moon
char str[10]; 
char sunbuf[61]; // variable for output formatting

extern unsigned int                  //Lunar Phase Pics
  New_Moon[0xA90],
  Waxing_Crescent[0xA90],
  First_Quarter[0xA90],
  Waxing_Gibbous[0xA90],
  Full_Moon[0xA90],
  Waning_Gibbous[0xA90],
  Last_Quarter[0xA90],
  Waning_Crescent[0xA90];

///////////////////////////////////////////////////////////////////////////////////////////////////////
void setup() {
  Serial.begin(115200);
  Wire.begin(); // (sda,scl) // A BMP180 sensor on SDA=13 SCL=15
  if (!bme.begin()) {
    Serial.println("Could not find a valid BMP280 sensor, check wiring!");
  }
  else
  {
    Serial.println("Found a valid BMP280 sensor continuing");
    while (isnan(bme.readPressure())) {
      Serial.println(bme.readPressure());
    }
  }
  Serial.print("Initializing SD card...");

  if (!SD.begin(53)) {
    Serial.println("Card failed, or not present!");
    while (1);
  }
  Serial.println("Card initialised."); 

if (! rtc.begin()) {
    Serial.println("Couldn't find RTC");
    while (1);
  }

  if (rtc.lostPower()) {
    Serial.println("RTC lost power, lets set the time!");
    // following line sets the RTC to the date & time this sketch was compiled
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
    // This line sets the RTC with an explicit date & time, for example to set
    // January 21, 2014 at 3am you would call:
     //rtc.adjust(DateTime(2019, 2, 6, 9, 59, 0));
  }
  
  Serial.println(F("Initialising LCD."));
  delay(3000); // wait for console opening
  myGLCD.InitLCD();

  dht1.begin();
  dht2.begin(); 
   
  
  Initialise_Variables();
  Read_Variables_from_SD();
  InitLcd();



  
}

void loop() {

  DateTime now = rtc.now();
         
  Time();
  Date();
  Temp_Int();
  Temp_Ext();
  update_data();
  drawFrame1();
  read_pressure();
  //renderhumidex();
  rendermoondays();

 
 
}


void InitLcd()
{

    myGLCD.clrScr();
    myGLCD.setFont(BigFont);
    myGLCD.fillScr(VGA_BLACK);
    myGLCD.setColor(VGA_WHITE); 
    myGLCD.print("Weather Station Ver. 1.0d", CENTER, 10);
    myGLCD.setColor(255, 255, 255);
    myGLCD.setBackColor(VGA_BLACK);
    myGLCD.drawRect(5, 5, 795, 475);
    myGLCD.drawLine(5, 30, 795, 30);
    myGLCD.drawLine(5, 100, 795, 100);
    myGLCD.drawLine(5, 215, 795, 215);
    myGLCD.drawLine(400, 100, 400, 215);
    myGLCD.drawLine(610, 100, 610, 215);
    myGLCD.drawLine(665, 330, 665, 475);
    myGLCD.drawLine(5, 330, 795, 330);    
    myGLCD.setFont(Grotesk16x32);
    myGLCD.print("Inside:", 35, 110);
    myGLCD.print("Outside:", 220, 110);
    myGLCD.print("Humidity:", 625, 110);
    myGLCD.print("%", 770, 140);
    myGLCD.print("Pressure:", 10, 220);
    myGLCD.setFont(SmallFont);
    myGLCD.setColor(VGA_YELLOW);
    myGLCD.print("In Max:",     160, 340);
    myGLCD.print("In Min:",     160, 360);
    myGLCD.print("Out Max:",    10, 340);
    myGLCD.print("Out Min:",    10, 360);
    myGLCD.print("DewPoint:",   305, 340);
    myGLCD.print("HeatInd:",  305, 360);
    myGLCD.print("Ins Humid:",  470, 335);
    myGLCD.setColor(VGA_WHITE);
    myGLCD.setFont(BigFont);
    myGLCD.print("hPa", 140, 273 );
    myGLCD.setFont(Grotesk16x32); 
    myGLCD.setColor(VGA_YELLOW);
    myGLCD.print("Time", 425, 110);
    myGLCD.setColor(255, 255, 255);
    //myGLCD.drawBitmap(680,365,52,52,Full_Moon,2);
//    myFiles.load(680,365, 50, 50, "cloudy_sm.RAW");

}


/******************************* TIME & DATE FUNCTION *********************************/
void Time(){


    DateTime now = rtc.now();

    char daysOfTheWeek[7][110] = {"Sunday,   ", "Monday,   ", "Tuesday,  ", "Wednesday,", "Thursday, ", "Friday,   ", "Saturday, "};


    myGLCD.setFont(Grotesk32x64);
    myGLCD.setColor(255, 255, 255);
    if (now.minute() >= 0 && now.minute() < 10) {
    myGLCD.print("0", 500, 150);
    myGLCD.printNumI(now.minute(), 535, 150, 1);
  }
  else{
    myGLCD.printNumI(now.minute(), 500, 150, 2);
  }
    myGLCD.printNumI(now.hour(), 405, 150, 2);
    myGLCD.print(":", 470, 150);
    myGLCD.setFont(Grotesk24x48);
    myGLCD.setColor(255, 255, 255);
    myGLCD.print(daysOfTheWeek[now.dayOfTheWeek()], 10, 40);
    myGLCD.printNumI(now.day(), 500, 40, 2);
    myGLCD.print(",", 545, 40);
    myGLCD.printNumI(now.year(), 600, 40, 2);
}

void Date(){

    DateTime now = rtc.now();   
  char* strm[] = {"January  ","February ","March    ","April    ","May      ","June     ","July     ","August   ","September","October  ","November ","December "};  
      myGLCD.setFont(Grotesk24x48);
      myGLCD.setColor(255, 255, 255);
      myGLCD.print(strm[now.month()-1], 270 , 40);
}

/******************************* INTERIOR TEMP & HUMIDITY FUNCTION *********************************/
void Temp_Int()
{
  float converted = 0.0;
  float temp_Int = dht2.readTemperature();
  float hum_Int = dht2.readHumidity();
  converted = ( temp_Int * 1.8 ) + 32;
  myGLCD.setFont(Grotesk32x64);
  myGLCD.printNumF(converted, 1, 30, 150);  
  if (Tmax_Int < converted)
  {
    Tmax_Int = converted;
  }
  if (converted < Tmin_Int)
  {
    Tmin_Int = converted;
  }
  myGLCD.setFont(BigFont);
  myGLCD.printNumF(hum_Int, 1, 560, 335);
  myGLCD.print("%",620,335);
  myGLCD.printNumF(Tmax_Int, 1, 230, 335);
  myGLCD.printNumF(Tmin_Int, 1, 230, 355);
}
/******************************* EXTERIOR TEMP & HUMIDITY FUNCTION *********************************/
void Temp_Ext ()
{
    float convert = 0.0; 
    float h = dht1.readHumidity();
    float t = dht1.readTemperature();
    convert = ( t * 1.8 ) + 32;
    myGLCD.setFont(Grotesk32x64);
    myGLCD.printNumF(h, 1, 640, 150);
    myGLCD.printNumF(convert, 1, 220, 150);
    myGLCD.setFont(BigFont);
    myGLCD.printNumF(dPF, 1, 380, 335);
    myGLCD.printNumF(heatIndex(tF,h), 1, 380, 355);
    myGLCD.setFont(SmallFont);
    if (isnan(t) || isnan(h)) {
    Serial.println("Failed to read from DHT Ext");
  } else {
    //Serial.print("Humidity: ");
    //Serial.print(h);
    //Serial.print(" %\t");
    //Serial.print("Temperature: ");
    tF=((t*9)/5)+32;
    //Serial.print(tF);
    //Serial.print(" *F ");
    //Serial.print(" \t");  
    //Serial.print("Dew Point: ");
    dP=(dewPointFast(t, h));
    dPF=((dP*9)/5)+32;
    //Serial.print(dPF);
    //Serial.print(" *F");
    //Serial.print(" \t"); 
    //Serial.print("Heat Index: ");
    //Serial.print(heatIndex(tF,h));
    //Serial.println(" *F");
  }    
    if (Tmax_Ext < convert)
   {
    Tmax_Ext = convert;
   }
    if (convert < Tmin_Ext)
   {
    Tmin_Ext = convert;
   }
    myGLCD.setFont(BigFont);
    myGLCD.printNumF(Tmax_Ext, 1, 85, 335);
    myGLCD.printNumF(Tmin_Ext, 1, 85, 355);
}
/******************************* DewPoiint & Heat Index FUNCTION *********************************/
// delta max = 0.6544 wrt dewPoint()
// 6.9 x faster than dewPoint()
// reference: http://en.wikipedia.org/wiki/Dew_point
double dewPointFast(double celsius, double humidity)
{
 double a = 17.271;
 double b = 237.7;
 double temp = (a * celsius) / (b + celsius) + log(humidity*0.01);
 double Td = (b * temp) / (a - temp);
 return Td;
}

double heatIndex(double tempF, double humidity)
{
  double c1 = -42.38, c2 = 2.049, c3 = 10.14, c4 = -0.2248, c5= -6.838e-3, c6=-5.482e-2, c7=1.228e-3, c8=8.528e-4, c9=-1.99e-6  ;
  double T = tempF;
  double R = humidity;

  double A = (( c5 * T) + c2) * T + c1;
  double B = ((c7 * T) + c4) * T + c3;
  double C = ((c9 * T) + c8) * T + c6;

  double rv = (C * R + B) * R + A;
  return rv;
}

  void renderhumidex() {  
 
 //Humidex mit Message
 
 
// myGLCD.setFont(SmallFont); 
// myGLCD.setColor(255, 255, 255);
// myGLCD.print(dtostrf(humidex, 5, 1, str), 230, 220, 0);
// myGLCD.setFont(SmallFont);
//Serial.println(humidex);
 if ((humidex >= 21 )&&(humidex < 27))
  {  //myGLCD.setColor(0, 255, 0);
     //myGLCD.print("No discomfort", 250, 265, 0); //No discomfort      
  } 
  if ((humidex >= 27 )&&(humidex < 35))
  { //myGLCD.setColor(255, 192, 64);
    //myGLCD.print("Some discomfort", 220, 265, 0);   //Some discomfort
  }
  if ((humidex >= 35 )&&(humidex < 40))
  { //myGLCD.setColor(255, 64, 0);
   //myGLCD.print("Great discomfort", 215, 265, 0);  //Great discomfort
  } 
  if ((humidex >= 40 )&&(humidex < 46))
  { //myGLCD.setColor(255, 0, 0);
  //myGLCD.print("Health risk", 215, 265, 0);  //Health risk
  } 
  if ((humidex >= 46 )&&(humidex < 54))
  { //myGLCD.setColor(255, 0, 0);
  //myGLCD.print("Great health risk", 210, 265, 0);  //Great health risk
  } 
  if ((humidex >= 54 ))
  { //myGLCD.setColor(255, 0, 0);
    //myGLCD.print("Heat stroke danger", 225, 265, 0); //Heat stroke danger
  } 
  
  }

//function to calculete Humidex

float calculate_humidex(float t,float h) {
  float e;

  e = (6.112 * pow(10,(7.5 * t/(237.7 + t))) * h/100); //vapor pressure

  float humidex = t + 0.55555555 * (e - 10.0); //humidex
  return humidex;

}
  
// This frame draws a weather icon based on 3-hours of data for the prediction
void drawFrame1() {
  float trend = reading[23] - reading[20];             // Trend over the last 3-hours
  calc_zambretti(reading[20], get_trend_text(trend));  // From forecast and trend determine what image to display
  //DisplayWXicon(x + 30, y + 95, wx_image);
  //DisplayTrend(x+145,y,trend_img);

  myGLCD.setFont(SmallFont);
      myGLCD.print(String(float(reading[23]), 2) + " hPa ("+String(trend, 2)+")"+"   ", 10, 305);
      myGLCD.setColor(VGA_AQUA);
      myGLCD.setFont(SmallFont);
      myGLCD.print("Pressure Trend:", 10, 380);
      myGLCD.setColor(255, 255, 255);
      myGLCD.setFont(BigFont);
      myGLCD.print(get_trend_text(trend), 10, 400);   //wx_descriptor
      //myGLCD.print( (wx_descriptor), 80, 400);
      //myGLCD.print("WX_Forecast:", 200, 263);
      
      myGLCD.setColor(VGA_AQUA);
      myGLCD.setFont(SmallFont);
      myGLCD.print("Weather Description:", 10, 430);
      myGLCD.setColor(255, 255, 255);
      myGLCD.setFont(BigFont);
      myGLCD.print(wx_text, 10, 450);
}

float read_pressure() {
  float pressure  = bme.readPressure() / 100.0F + pressure_offset; 
  Serial.println(pressure);
  myGLCD.setFont(Grotesk16x32);
  myGLCD.printNumF(pressure, 2, 10, 260);
  myGLCD.setFont(BigFont);
  int altitude    = 74; // in METRES
  temperature = (int)dht1.readTemperature();
  return (double)pressure*pow(1-0.0065*(double)altitude/(temperature+0.0065*(double)altitude+273.15),-5.275);
}

void DisplayTrend(int x, int y, String trend_img){
  #define rising   1
  #define steady   0
  #define falling -1
  if      (trend_img == "Steady     ") ;  //draw_arrow(x, y+1, steady,  10); // x,y, direction, scale
  else if (trend_img == "Rising Slow") ; //draw_arrow(x, y+1, rising,  10);
  else if (trend_img == "Rising     ")  ; //draw_arrow(x, y+1, rising,  10);
  else if (trend_img == "Fall Slow  "); //draw_arrow(x, y+1, falling, 10);
  else if (trend_img == "Falling    ") ; //draw_arrow(x, y+1, falling, 10);
}

// Convert pressure trend to text
String get_trend_text(float trend) {
  String trend_str = "Steady"; // Default weather state
  if      (trend > 3.5)                    {trend_str = "Rising fast";  trend_img = "rising";}
  else if (trend > 1.5   && trend <= 3.5)  {trend_str = "Rising     ";       trend_img = "rising";}
  else if (trend > 0.25  && trend <= 1.5)  {trend_str = "Rising slow";  trend_img = "srising";}
  else if (trend > -0.25 && trend < 0.25)  {trend_str = "Steady     ";       trend_img = "steady";}
  else if (trend >= -1.5 && trend < -0.25) {trend_str = "Fallin slow"; trend_img = "sfalling";}
  else if (trend >= -3.5 && trend < -1.5)  {trend_str = "Falling    ";      trend_img = "falling";}
  else if (trend <= -3.5)                  {trend_str = "Fallin fast"; trend_img = "falling";}
  return trend_str;
}

String wx_forecast(char code){
  String wx_descriptor = "";
  switch (code) {
  case 'A': wx_descriptor = "Settled Fine Weather                  "; break;
  case 'B': wx_descriptor = "Fine Weather                          "; break;
  case 'C': wx_descriptor = "Becoming Fine                         "; break;
  case 'D': wx_descriptor = "Fine, Becoming Less Settled           "; break;
  case 'E': wx_descriptor = "Fine, Possibly showers                "; break;
  case 'F': wx_descriptor = "Fairly Fine, Improving                "; break;
  case 'G': wx_descriptor = "Fairly Fine, Possibly showers early   "; break;
  case 'H': wx_descriptor = "Fairly Fine, Showers Later            "; break;
  case 'I': wx_descriptor = "Showery Early, Improving              "; break;
  case 'J': wx_descriptor = "Changeable Improving                  "; break;
  case 'K': wx_descriptor = "Fairly Fine, Showers likely           "; break;
  case 'L': wx_descriptor = "Rather Unsettled Clearing Later       "; break;
  case 'M': wx_descriptor = "Unsettled, Probably Improving         "; break;
  case 'N': wx_descriptor = "Showery Bright Intervals              "; break;
  case 'O': wx_descriptor = "Showery Becoming Unsettled            "; break;
  case 'P': wx_descriptor = "Changeable some rain                  "; break;
  case 'Q': wx_descriptor = "Unsettled, short fine Intervals       "; break;
  case 'R': wx_descriptor = "Unsettled, Rain later                 "; break;
  case 'S': wx_descriptor = "Unsettled, rain at times              "; break;
  case 'T': wx_descriptor = "Very Unsettled, Finer at times        "; break;
  case 'U': wx_descriptor = "Rain at times, Worse later            "; break;
  case 'V': wx_descriptor = "Rain at times, becoming very unsettled"; break;
  case 'W': wx_descriptor = "Rain at Frequent Intervals            "; break;
  case 'X': wx_descriptor = "Very Unsettled, Rain                  "; break;
  case 'Y': wx_descriptor = "Stormy, possibly improving"; break;
  case 'Z': wx_descriptor = "Stormy, much rain"; break;
   default: wx_descriptor = "Unknown"; break;
  }
  return wx_descriptor;
}

void calc_zambretti(float zpressure, String ztrend) {
  DateTime now = rtc.now();
  int zmonth = now.month();
  // FALLING
  if (ztrend == "Falling" || ztrend == "Falling slow" || ztrend == "Falling fast") {
    double zambretti = 0.0009746*zpressure*zpressure - 2.1068*zpressure+1138.7019; //y = 0.0009746x^2-2.1068x+1138.7019
    // A Winter falling generally results in a Z value higher by 1 unit. 
    if (zmonth < 4 || zmonth > 9) zambretti = zambretti + 1; // + makes the forecast worst, - better!
    Serial.println(round(zambretti));
    switch (int(round(zambretti))) {
      case 1:  wx_text = wx_forecast('A'); wx_image = "sunny"; break;       //Settled Fine
      case 2:  wx_text = wx_forecast('B'); wx_image = "sunny"; break;       //Fine Weather
      case 3:  wx_text = wx_forecast('D'); wx_image = "expectrain"; break;  //Fine Becoming Less Settled
      case 4:  wx_text = wx_forecast('H'); wx_image = "expectrain"; break;  //Fairly Fine Showers Later
      case 5:  wx_text = wx_forecast('O'); wx_image = "expectrain"; break;  //Showery Becoming unsettled
      case 6:  wx_text = wx_forecast('R'); wx_image = "rain"; break;        //Unsettled, Rain later
      case 7:  wx_text = wx_forecast('U'); wx_image = "rain"; break;        //Rain at times, worse later
      case 8:  wx_text = wx_forecast('V'); wx_image = "rain"; break;        //Rain at times, becoming very unsettled
      case 9:  wx_text = wx_forecast('X'); wx_image = "rain"; break;        //Very Unsettled, Rain
      default: wx_text = "unknown";        wx_image = "nodata"; break;
    }
  }
  // STEADY
  if (ztrend == "Steady") {
    float zambretti = 138.24-0.133*zpressure; // y = 138.24-0.1331x
    switch (int(round(zambretti))) {
      case 1:  wx_text = wx_forecast('A'); wx_image = "sunny"; break;       //Settled Fine
      case 2:  wx_text = wx_forecast('B'); wx_image = "sunny"; break;       //Fine Weather
      case 3:  wx_text = wx_forecast('E'); wx_image = "expectrain"; break;  //Fine, Possibly showers
      case 4:  wx_text = wx_forecast('K'); wx_image = "expectrain"; break;  //Fairly Fine, Showers likely
      case 5:  wx_text = wx_forecast('N'); wx_image = "expectrain"; break;  //Showery Bright Intervals
      case 6:  wx_text = wx_forecast('P'); wx_image = "cloudy"; break;      //Changeable some rain
      case 7:  wx_text = wx_forecast('S'); wx_image = "rain"; break;        //Unsettled, rain at times
      case 8:  wx_text = wx_forecast('W'); wx_image = "rain"; break;        //Rain at Frequent Intervals
      case 9:  wx_text = wx_forecast('X'); wx_image = "rain"; break;        //Very Unsettled, Rain
      case 10: wx_text = wx_forecast('Z'); wx_image = "tstorms"; break;     //Stormy, much rain
      default: wx_text = "unknown";        wx_image = "nodata"; break;
    }
  }
  // RISING
  if (ztrend == "Rising" || ztrend == "Rising slow" || ztrend == "Rising fast") {
    float zambretti = 142.57-0.1376*zpressure; //y = 142.57-0.1376x
    //A Summer rising, improves the prospects by 1 unit over a Winter rising
    if (zmonth < 4 || zmonth > 9) zambretti = zambretti + 1; // Increasing values makes the forecast worst!
    switch (int(round(zambretti))) {
      case 1:  wx_text = wx_forecast('A'); wx_image = "sunny"; break;       //Settled Fine
      case 2:  wx_text = wx_forecast('B'); wx_image = "sunny"; break;       //Fine Weather
      case 3:  wx_text = wx_forecast('C'); wx_image = "mostlysunny"; break; //Becoming Fine
      case 4:  wx_text = wx_forecast('F'); wx_image = "mostlysunny"; break; //Fairly Fine, Improving
      case 5:  wx_text = wx_forecast('G'); wx_image = "expectrain"; break;  //Fairly Fine, Possibly showers, early
      case 6:  wx_text = wx_forecast('I'); wx_image = "expectrain"; break;  //Showery Early, Improving
      case 7:  wx_text = wx_forecast('J'); wx_image = "cloudy"; break;      //Changeable, Improving
      case 8:  wx_text = wx_forecast('L'); wx_image = "cloudy"; break;      //Rather Unsettled Clearing Later
      case 9:  wx_text = wx_forecast('M'); wx_image = "cloudy"; break;      //Unsettled, Probably Improving
      case 10: wx_text = wx_forecast('Q'); wx_image = "mostlysunny"; break; //Unsettled, short fine Intervals
      case 11: wx_text = wx_forecast('T'); wx_image = "cloudy"; break;      //Very Unsettled, Finer at times
      case 12: wx_text = wx_forecast('Y'); wx_image = "tstorms"; break;     //Stormy, possibly improving
      case 13: wx_text = wx_forecast('Z'); wx_image = "tstorms"; break;     //Stormy, much rain
      default: wx_text = "unknown";        wx_image = "nodata"; break;
    }
  }
  Serial.println(wx_text);
}


void DisplayWXicon(int x, int y, String image_name) {
  int scale = 10;
  if      (image_name == "rain")         ;//Rain(x,y,scale);
  else if (image_name == "sunny")        ;//Sunny(x,y,scale);
  else if (image_name == "mostlysunny")  ;//MostlySunny(x,y,scale);
  else if (image_name == "mostlycloudy") ;//MostlyCloudy(x,y,scale);
  else if (image_name == "expectrain")   ;//ExpectRain(x,y,scale);
  else if (image_name == "cloudy")       ;//Cloudy(x,y,scale);
  else if (image_name == "snow")         ;//Snow(x,y,scale);
  else if (image_name == "tstorms")      ;//Tstorms(x,y,scale);
  else                                   ;//Nodata(x,y,scale);
}

void update_data() {
  DateTime now = rtc.now();
  if (now.hour() != reading_hour) { //After a restart the time may be the same so don't update anything
    reading_hour++;
    hr_cnt++;
    if (reading_hour > 24) reading_hour = 0;
    if (reading_hour != last_reading_hour) { // If the hour has advanced, then shift readings left and record new values at array element [23]
      for (int i = 0; i < 23; i++) {
        reading[i] = reading[i + 1];
      }
      reading[23]       = read_pressure(); // Update time=now with current pressure
      last_reading_hour = reading_hour;
      
    }
    Save_Variables_to_SD();
  }
  
}
void Initialise_Variables() {
  reading_hour   = 0;
  hr_cnt         = 0;
  float pressure = read_pressure();
  for (int i = 0; i <= 23; i++) {   // At the start all array values are the same as a baseline
    reading[i] = pressure;
  }                                 // Note that only 0,5,11,17,20,21,22,23 are used as display positions
  last_reading_hour = reading_hour;
}

void Read_Variables_from_SD() {
  Initialise_Variables();
  char filename [] = "/data.txt";                     // Assign a filename or use the format e.g. SD.open("datalog.txt",...);
  myFile = SD.open(filename, FILE_READ);        // Open a file for reading and writing (appending)
  if (!myFile) {
    Serial.println("Failed to open file");
  }
  Serial.println("Reading file");
  String temp_data;
  temp_data = myFile.readStringUntil('\n');  hr_cnt = temp_data.toInt();
  temp_data = myFile.readStringUntil('\n');  reading_hour = temp_data.toInt();
  temp_data = myFile.readStringUntil('\n');  last_reading_hour = temp_data.toInt();
  for (int i = 0; i <= 23; i++) {
    temp_data = myFile.readStringUntil('\n');
    reading[i] = temp_data.toFloat();
    
  }
  myFile.close();
}

void Save_Variables_to_SD() {
  char filename [] = "/data.txt";                     // Assign a filename or use the format e.g. SD.open("datalog.txt",...);
  myFile = SD.open(filename, FILE_WRITE);        // Open a file for reading and writing (appending)
  if (!myFile) {
    Serial.println("Failed to open file");
  }
  myFile.println(hr_cnt);
  //Serial.println("Save Hour Count="+String(hr_cnt));
  myFile.println(reading_hour);
  Serial.println("Save Reading hour="+String(reading_hour));
  myFile.println(last_reading_hour);
  //Serial.println("Save Last Reading hour="+String(last_reading_hour));
  for (int i = 0; i <= 23; i++) {
    myFile.println(reading[i]);
  }
  myFile.close();
  Serial.println("Now reading back after write");
  myFile = SD.open(filename, FILE_READ);        // Open a file for reading and writing (appending)
  while (myFile.available()) {
    Serial.print("R=");Serial.println(myFile.readStringUntil('\n'));
  }
  myFile.close();
}

  void rendermoondays() { 
  
    DateTime moon2 = rtc.now();
  
  double jdnfm = 0; // Julian Date
  double ednfm = 0; //days elapsed since start of full moon
  int b= 0;
  jdnfm = julianDate(moon2.year(), moon2.month(), moon2.day());
  //jd = julianDate(1972,1,1); // used to debug this is a new moon
  jdnfm = int(jdnfm - 2244116.75); // start at Jan 1 1972
  jdnfm /= 29.53; // divide by the moon cycle    
  b = jdnfm;
  jdnfm -= b; // leaves the fractional part of jd
  ednfm = jdnfm * 29.53; // days elapsed this month
  nfm = String((int(29.53 - ednfm))); // days to next full moon
  Serial.println("Days to next full moon");
  Serial.println(nfm);
  char* newNfm = (char*) nfm.c_str();   
  myGLCD.setColor(255, 255, 255);
  myGLCD.print("Days til Full Moon:",425,263);
  myGLCD.print((newNfm), 725, 263, 0); 
  
  }


 //Formula days to full moon

double julianDate(int y, int m, int d){
// convert a date to a Julian Date}
  int mm,yy;
  double k1, k2, k3;
  double j;
  
  yy = y- int((12-m)/10);
  mm = m+9;
  if(mm >= 12) {
    mm = mm-12;
  }
  k1 = 365.25 *(yy +4172);
  k2 = int((30.6001 * mm) + 0.5);
  k3 = int((((yy/100) + 4) * 0.75) -38);
  j = k1 +k2 + d + 59;
  j = j-k3; // j is the Julian date at 12h UT (Universal Time)

  return j;
}

//Formula moon phase
  


 double MyNormalize(double v){
  
    v = v - floor(v);
    if (v < 0)
    v = v + 1;
    return v;
  }

 
/*
void draw_arrow(int x, int y, int dir, int scale){ //11h x 10w grid
  #define linesize 2
  if (dir== -1){     // Falling
    display.fillRect(x+scale, y+scale/2, linesize, scale/2+linesize, GxEPD_BLACK); // h x w
    display.fillRect(x+scale/2, y+scale, scale/2+linesize, linesize, GxEPD_BLACK);
    display.drawLine(x,y,x+scale,y+scale,GxEPD_BLACK);
    display.drawLine(x+1,y,x+scale+1,y+scale,GxEPD_BLACK);
  }
  else if (dir== 0){ // Steady
    display.fillRect(x, y+scale/2, scale, linesize, GxEPD_BLACK); // h x w
    display.drawLine(x+scale/2,y,x+scale,y+scale/2,GxEPD_BLACK);
    display.drawLine(x+scale/2-1,y,x+scale-1,y+scale/2,GxEPD_BLACK);
    display.drawLine(x+scale/2,y+scale+1,x+scale,y+scale/2+1,GxEPD_BLACK);
    display.drawLine(x+scale/2-1,y+scale+1,x+scale-1,y+scale/2+1,GxEPD_BLACK);
  }
  else if (dir== 1){ // Rising
    display.fillRect(x+scale/2, y, scale/2+linesize, linesize, GxEPD_BLACK); // h x w
    display.fillRect(x+scale, y, linesize, scale/2+linesize, GxEPD_BLACK); // h x w
    display.drawLine(x,y+scale,x+scale,y,GxEPD_BLACK);
    display.drawLine(x+1,y+scale,x+scale+1,y,GxEPD_BLACK);
  }  
}

void addcloud(int x, int y, int scale) {
  #define linesize 3
  display.fillCircle(x-scale/2, y-scale/2, scale, GxEPD_BLACK);                     // Left most circle - outer
  display.fillCircle(x-scale/2, y-scale/2, scale-linesize, GxEPD_WHITE);            // Left most circle - inner
  display.fillRect(x-scale/2, y+scale/2-2, scale*4.4, linesize,GxEPD_BLACK); // Lower line
  display.fillCircle(x+scale*3.8, y-scale/2, scale, GxEPD_BLACK);                   // Right most circle - outer
  display.fillCircle(x+scale*3.8, y-scale/2, scale-linesize, GxEPD_WHITE);          // Right most circle - inner
  display.fillCircle(x+scale*2.8, y-scale*2, scale*1.3, GxEPD_BLACK);               // Larger upper-circle - outer
  display.fillCircle(x+scale, y-scale*1.6, scale, GxEPD_BLACK);                     // Left upper circle - outer
  display.fillCircle(x+scale, y-scale*1.6, scale-linesize, GxEPD_WHITE);            // Left upper circle - inner
  display.fillCircle(x+scale*2.8, y-scale*2, scale*1.3-linesize, GxEPD_WHITE);      // Larger upper circle - inner
  display.fillRect(x-scale/2, y-scale, scale*4.4, scale*1.37,GxEPD_WHITE);               // Clear inside the cloud
  display.fillRect(x-scale/2, y+scale/2-linesize*1.5, scale*4.4, linesize,GxEPD_WHITE);  // Clear inside the cloud
  display.fillRect(x+scale, y-scale*2, scale*2.8, scale*2,GxEPD_WHITE);                  // Clear inside the cloud
}

void addrain(int x, int y, int scale){
  x = x + scale;
  for (int i = 0; i < 4; i++){
    display.drawLine(i*scale+x-scale*0.9,y+scale,i*scale+x-scale*0.9*1.5,y+scale*2,GxEPD_BLACK);
    display.drawLine(i*scale+x-scale*0.9+1,y+scale,i*scale+x-scale*0.9*1.5+1,y+scale*2,GxEPD_BLACK);
    display.drawLine(i*scale+x-scale*0.9+2,y+scale,i*scale+x-scale*0.9*1.5+2,y+scale*2,GxEPD_BLACK);
  }
}

void addsnow(int x, int y, int scale){
  int dxo, dyo, dxi, dyi;
  x = x - scale / 1.2;
  y = y + scale * 1.2;
  for (int flakes = 0; flakes < 4;flakes++){
    for (int i = 0; i <360; i = i + 45) {
      dxo = 0.5*scale * cos((i-90)*3.14/180); dxi = dxo*0.1;
      dyo = 0.5*scale * sin((i-90)*3.14/180); dyi = dyo*0.1;
      display.drawLine(dxo+x+0+flakes*1.5*scale,dyo+y,dxi+x+0+flakes*1.5*scale,dyi+y,GxEPD_BLACK); 
    }
  }
}

void addtstorm(int x, int y, int scale){
  x = x + scale;
  y = y - scale / 4;
  for (int i = 0; i < 4; i++){
    display.drawLine(i*scale+x-scale*0.9,     y+scale,       i*scale+x-scale*0.9*1.5,   y+scale*1.8,GxEPD_BLACK);
    display.drawLine(i*scale+x-scale*0.9+1,   y+scale,       i*scale+x-scale*0.9*1.5+1, y+scale*1.8,GxEPD_BLACK);
    display.drawLine(i*scale+x-scale*0.9*1.5, y+scale*1.8,   i*scale+x-scale*0.9,       y+scale*1.8,GxEPD_BLACK);
    display.drawLine(i*scale+x-scale*0.9*1.5, y+scale*1.8+1, i*scale+x-scale*0.9,       y+scale*1.8+1,GxEPD_BLACK);
    display.drawLine(i*scale+x-scale*0.9,     y+scale*1.8,   i*scale+x-scale*0.8*1.5,   y+scale*2.4,GxEPD_BLACK);
    display.drawLine(i*scale+x-scale*0.9+1,   y+scale*1.8,   i*scale+x-scale*0.8*1.5+1, y+scale*2.4,GxEPD_BLACK);
  }
}

void addsun(int x, int y, int scale) {
  #define linesize 3
  int dxo, dyo, dxi, dyi;
  display.fillCircle(x, y, scale,GxEPD_BLACK);
  display.fillCircle(x, y, scale-linesize,GxEPD_WHITE);
  for (float i = 0; i <360; i = i + 45) {
    dxo = 2.2*scale * cos((i-90)*3.14/180); dxi = dxo * 0.65;
    dyo = 2.2*scale * sin((i-90)*3.14/180); dyi = dyo * 0.65;
    if (i == 0   || i == 180) {
      display.drawLine(dxo+x-1,dyo+y,dxi+x-1,dyi+y,GxEPD_BLACK);
      display.drawLine(dxo+x+0,dyo+y,dxi+x+0,dyi+y,GxEPD_BLACK); 
      display.drawLine(dxo+x+1,dyo+y,dxi+x+1,dyi+y,GxEPD_BLACK);
    }
    if (i == 90  || i == 270) {
      display.drawLine(dxo+x,dyo+y-1,dxi+x,dyi+y-1,GxEPD_BLACK);
      display.drawLine(dxo+x,dyo+y+0,dxi+x,dyi+y+0,GxEPD_BLACK); 
      display.drawLine(dxo+x,dyo+y+1,dxi+x,dyi+y+1,GxEPD_BLACK); 
    }
    if (i == 45  || i == 135 || i == 225 || i == 315) {
      display.drawLine(dxo+x-1,dyo+y,dxi+x-1,dyi+y,GxEPD_BLACK);
      display.drawLine(dxo+x+0,dyo+y,dxi+x+0,dyi+y,GxEPD_BLACK); 
      display.drawLine(dxo+x+1,dyo+y,dxi+x+1,dyi+y,GxEPD_BLACK); 
    }
  }
}

void MostlyCloudy(int x, int y, int scale){ 
  addsun(x+scale/3,y-scale*2.1,scale); 
  addcloud(x,y,scale); 
}

void MostlySunny(int x, int y, int scale){ 
  addcloud(x,y,scale); 
  addsun(x+scale/3,y-scale*2.1,scale); 
}
 
void Rain(int x, int y, int scale){ 
  addcloud(x,y,scale); 
  addrain(x,y,scale); 
} 

void Cloudy(int x, int y, int scale){
  addcloud(x,y,scale);
}

void Sunny(int x, int y, int scale){
  addsun(x,y,scale);
}

void ExpectRain(int x, int y, int scale){
  addsun(x+scale/3,y-scale*2.1,scale); 
  addcloud(x,y,scale);
  addrain(x,y,scale);
}

void Tstorms(int x, int y, int scale){
  addcloud(x,y,scale);
  addtstorm(x,y,scale);
}

void Snow(int x, int y, int scale){
  addcloud(x,y,scale);
  addsnow(x,y,scale);
}

void Nodata(int x, int y, int scale){
  if (scale == 10) display.setTextSize(3); else display.setTextSize(1);
  display.setCursor(x,y);
  display.println("?");
  display.setTextSize(1);
  
}

//#########################################################################################
String WindDegToDirection(float winddirection) {
  if (winddirection >= 348.75 || winddirection < 11.25)  return "N";
  if (winddirection >=  11.25 && winddirection < 33.75)  return "NNE";
  if (winddirection >=  33.75 && winddirection < 56.25)  return "NE";
  if (winddirection >=  56.25 && winddirection < 78.75)  return "ENE";
  if (winddirection >=  78.75 && winddirection < 101.25) return "E";
  if (winddirection >= 101.25 && winddirection < 123.75) return "ESE";
  if (winddirection >= 123.75 && winddirection < 146.25) return "SE";
  if (winddirection >= 146.25 && winddirection < 168.75) return "SSE";
  if (winddirection >= 168.75 && winddirection < 191.25) return "S";
  if (winddirection >= 191.25 && winddirection < 213.75) return "SSW";
  if (winddirection >= 213.75 && winddirection < 236.25) return "SW";
  if (winddirection >= 236.25 && winddirection < 258.75) return "WSW";
  if (winddirection >= 258.75 && winddirection < 281.25) return "W";
  if (winddirection >= 281.25 && winddirection < 303.75) return "WNW";
  if (winddirection >= 303.75 && winddirection < 326.25) return "NW";
  if (winddirection >= 326.25 && winddirection < 348.75) return "NNW";
  return "?";
}
//#########################################################################################
*/
